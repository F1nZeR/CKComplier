//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g 2013-09-27 12:27:43

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019

#pragma warning disable 3021

using System;
using System.Text;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace CKCompiler.Analyzers
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class CKLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int ASSIGN=4;
	public const int BoolTypeName=5;
	public const int CHAR=6;
	public const int CLASS=7;
	public const int COLON=8;
	public const int COMMA=9;
	public const int COMMENT=10;
	public const int CharTypeName=11;
	public const int Class=12;
	public const int ClassesList=13;
	public const int DIGIT=14;
	public const int DIV=15;
	public const int DOT=16;
	public const int ELSE=17;
	public const int ENDIF=18;
	public const int ENDLOOP=19;
	public const int EQUAL=20;
	public const int Expr=21;
	public const int Exprs=22;
	public const int FALL_THROUGH=23;
	public const int FALSE=24;
	public const int FLOAT=25;
	public const int FeatureList=26;
	public const int FloatTypeName=27;
	public const int FuncDef=28;
	public const int FunctionArgsList=29;
	public const int GE=30;
	public const int GT=31;
	public const int ID=32;
	public const int IF=33;
	public const int INTEGER=34;
	public const int ISVOID=35;
	public const int ImplicitInvoke=36;
	public const int IntTypeName=37;
	public const int InvokeExprs=38;
	public const int LCURLY=39;
	public const int LE=40;
	public const int LETTER=41;
	public const int LOOP=42;
	public const int LPAREN=43;
	public const int LT=44;
	public const int LocalOrFieldInit=45;
	public const int MINUS=46;
	public const int MULT=47;
	public const int MULTILINE_COMMENT=48;
	public const int NEG=49;
	public const int NEW=50;
	public const int NOT=51;
	public const int ObjectTypeName=52;
	public const int PLUS=53;
	public const int RCURLY=54;
	public const int RETURN=55;
	public const int RPAREN=56;
	public const int SEMI=57;
	public const int STRING=58;
	public const int StringTypeName=59;
	public const int THEN=60;
	public const int TRUE=61;
	public const int Term=62;
	public const int VAR=63;
	public const int VOID=64;
	public const int VarExprs=65;
	public const int WHILE=66;
	public const int WS=67;

    // delegates
    // delegators

	public CKLexer()
	{
		OnCreated();
	}

	public CKLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public CKLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_CLASS();
	partial void LeaveRule_CLASS();

	// $ANTLR start "CLASS"
	[GrammarRule("CLASS")]
	private void mCLASS()
	{
		EnterRule_CLASS();
		EnterRule("CLASS", 1);
		TraceIn("CLASS", 1);
		try
		{
			int _type = CLASS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:126:7: ( 'class' )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:126:9: 'class'
			{
			DebugLocation(126, 9);
			Match("class"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CLASS", 1);
			LeaveRule("CLASS", 1);
			LeaveRule_CLASS();
		}
	}
	// $ANTLR end "CLASS"

	partial void EnterRule_ELSE();
	partial void LeaveRule_ELSE();

	// $ANTLR start "ELSE"
	[GrammarRule("ELSE")]
	private void mELSE()
	{
		EnterRule_ELSE();
		EnterRule("ELSE", 2);
		TraceIn("ELSE", 2);
		try
		{
			int _type = ELSE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:127:6: ( 'else' )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:127:8: 'else'
			{
			DebugLocation(127, 8);
			Match("else"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ELSE", 2);
			LeaveRule("ELSE", 2);
			LeaveRule_ELSE();
		}
	}
	// $ANTLR end "ELSE"

	partial void EnterRule_FALSE();
	partial void LeaveRule_FALSE();

	// $ANTLR start "FALSE"
	[GrammarRule("FALSE")]
	private void mFALSE()
	{
		EnterRule_FALSE();
		EnterRule("FALSE", 3);
		TraceIn("FALSE", 3);
		try
		{
			int _type = FALSE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:128:7: ( 'false' )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:128:9: 'false'
			{
			DebugLocation(128, 9);
			Match("false"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FALSE", 3);
			LeaveRule("FALSE", 3);
			LeaveRule_FALSE();
		}
	}
	// $ANTLR end "FALSE"

	partial void EnterRule_ENDIF();
	partial void LeaveRule_ENDIF();

	// $ANTLR start "ENDIF"
	[GrammarRule("ENDIF")]
	private void mENDIF()
	{
		EnterRule_ENDIF();
		EnterRule("ENDIF", 4);
		TraceIn("ENDIF", 4);
		try
		{
			int _type = ENDIF;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:129:7: ( 'endif' )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:129:9: 'endif'
			{
			DebugLocation(129, 9);
			Match("endif"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ENDIF", 4);
			LeaveRule("ENDIF", 4);
			LeaveRule_ENDIF();
		}
	}
	// $ANTLR end "ENDIF"

	partial void EnterRule_IF();
	partial void LeaveRule_IF();

	// $ANTLR start "IF"
	[GrammarRule("IF")]
	private void mIF()
	{
		EnterRule_IF();
		EnterRule("IF", 5);
		TraceIn("IF", 5);
		try
		{
			int _type = IF;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:130:4: ( 'if' )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:130:6: 'if'
			{
			DebugLocation(130, 6);
			Match("if"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IF", 5);
			LeaveRule("IF", 5);
			LeaveRule_IF();
		}
	}
	// $ANTLR end "IF"

	partial void EnterRule_RETURN();
	partial void LeaveRule_RETURN();

	// $ANTLR start "RETURN"
	[GrammarRule("RETURN")]
	private void mRETURN()
	{
		EnterRule_RETURN();
		EnterRule("RETURN", 6);
		TraceIn("RETURN", 6);
		try
		{
			int _type = RETURN;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:131:8: ( 'return' )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:131:10: 'return'
			{
			DebugLocation(131, 10);
			Match("return"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RETURN", 6);
			LeaveRule("RETURN", 6);
			LeaveRule_RETURN();
		}
	}
	// $ANTLR end "RETURN"

	partial void EnterRule_ISVOID();
	partial void LeaveRule_ISVOID();

	// $ANTLR start "ISVOID"
	[GrammarRule("ISVOID")]
	private void mISVOID()
	{
		EnterRule_ISVOID();
		EnterRule("ISVOID", 7);
		TraceIn("ISVOID", 7);
		try
		{
			int _type = ISVOID;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:132:8: ( 'isvoid' )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:132:10: 'isvoid'
			{
			DebugLocation(132, 10);
			Match("isvoid"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ISVOID", 7);
			LeaveRule("ISVOID", 7);
			LeaveRule_ISVOID();
		}
	}
	// $ANTLR end "ISVOID"

	partial void EnterRule_VAR();
	partial void LeaveRule_VAR();

	// $ANTLR start "VAR"
	[GrammarRule("VAR")]
	private void mVAR()
	{
		EnterRule_VAR();
		EnterRule("VAR", 8);
		TraceIn("VAR", 8);
		try
		{
			int _type = VAR;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:133:5: ( 'var' )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:133:7: 'var'
			{
			DebugLocation(133, 7);
			Match("var"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("VAR", 8);
			LeaveRule("VAR", 8);
			LeaveRule_VAR();
		}
	}
	// $ANTLR end "VAR"

	partial void EnterRule_LOOP();
	partial void LeaveRule_LOOP();

	// $ANTLR start "LOOP"
	[GrammarRule("LOOP")]
	private void mLOOP()
	{
		EnterRule_LOOP();
		EnterRule("LOOP", 9);
		TraceIn("LOOP", 9);
		try
		{
			int _type = LOOP;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:134:6: ( 'loop' )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:134:8: 'loop'
			{
			DebugLocation(134, 8);
			Match("loop"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LOOP", 9);
			LeaveRule("LOOP", 9);
			LeaveRule_LOOP();
		}
	}
	// $ANTLR end "LOOP"

	partial void EnterRule_ENDLOOP();
	partial void LeaveRule_ENDLOOP();

	// $ANTLR start "ENDLOOP"
	[GrammarRule("ENDLOOP")]
	private void mENDLOOP()
	{
		EnterRule_ENDLOOP();
		EnterRule("ENDLOOP", 10);
		TraceIn("ENDLOOP", 10);
		try
		{
			int _type = ENDLOOP;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:135:9: ( 'endloop' )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:135:11: 'endloop'
			{
			DebugLocation(135, 11);
			Match("endloop"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ENDLOOP", 10);
			LeaveRule("ENDLOOP", 10);
			LeaveRule_ENDLOOP();
		}
	}
	// $ANTLR end "ENDLOOP"

	partial void EnterRule_THEN();
	partial void LeaveRule_THEN();

	// $ANTLR start "THEN"
	[GrammarRule("THEN")]
	private void mTHEN()
	{
		EnterRule_THEN();
		EnterRule("THEN", 11);
		TraceIn("THEN", 11);
		try
		{
			int _type = THEN;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:136:6: ( 'then' )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:136:8: 'then'
			{
			DebugLocation(136, 8);
			Match("then"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("THEN", 11);
			LeaveRule("THEN", 11);
			LeaveRule_THEN();
		}
	}
	// $ANTLR end "THEN"

	partial void EnterRule_WHILE();
	partial void LeaveRule_WHILE();

	// $ANTLR start "WHILE"
	[GrammarRule("WHILE")]
	private void mWHILE()
	{
		EnterRule_WHILE();
		EnterRule("WHILE", 12);
		TraceIn("WHILE", 12);
		try
		{
			int _type = WHILE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:137:7: ( 'while' )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:137:9: 'while'
			{
			DebugLocation(137, 9);
			Match("while"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WHILE", 12);
			LeaveRule("WHILE", 12);
			LeaveRule_WHILE();
		}
	}
	// $ANTLR end "WHILE"

	partial void EnterRule_NEW();
	partial void LeaveRule_NEW();

	// $ANTLR start "NEW"
	[GrammarRule("NEW")]
	private void mNEW()
	{
		EnterRule_NEW();
		EnterRule("NEW", 13);
		TraceIn("NEW", 13);
		try
		{
			int _type = NEW;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:138:5: ( 'new' )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:138:7: 'new'
			{
			DebugLocation(138, 7);
			Match("new"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NEW", 13);
			LeaveRule("NEW", 13);
			LeaveRule_NEW();
		}
	}
	// $ANTLR end "NEW"

	partial void EnterRule_NOT();
	partial void LeaveRule_NOT();

	// $ANTLR start "NOT"
	[GrammarRule("NOT")]
	private void mNOT()
	{
		EnterRule_NOT();
		EnterRule("NOT", 14);
		TraceIn("NOT", 14);
		try
		{
			int _type = NOT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:139:5: ( 'not' )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:139:7: 'not'
			{
			DebugLocation(139, 7);
			Match("not"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NOT", 14);
			LeaveRule("NOT", 14);
			LeaveRule_NOT();
		}
	}
	// $ANTLR end "NOT"

	partial void EnterRule_TRUE();
	partial void LeaveRule_TRUE();

	// $ANTLR start "TRUE"
	[GrammarRule("TRUE")]
	private void mTRUE()
	{
		EnterRule_TRUE();
		EnterRule("TRUE", 15);
		TraceIn("TRUE", 15);
		try
		{
			int _type = TRUE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:140:6: ( 'true' )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:140:8: 'true'
			{
			DebugLocation(140, 8);
			Match("true"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TRUE", 15);
			LeaveRule("TRUE", 15);
			LeaveRule_TRUE();
		}
	}
	// $ANTLR end "TRUE"

	partial void EnterRule_VOID();
	partial void LeaveRule_VOID();

	// $ANTLR start "VOID"
	[GrammarRule("VOID")]
	private void mVOID()
	{
		EnterRule_VOID();
		EnterRule("VOID", 16);
		TraceIn("VOID", 16);
		try
		{
			int _type = VOID;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:141:6: ( 'void' )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:141:8: 'void'
			{
			DebugLocation(141, 8);
			Match("void"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("VOID", 16);
			LeaveRule("VOID", 16);
			LeaveRule_VOID();
		}
	}
	// $ANTLR end "VOID"

	partial void EnterRule_DOT();
	partial void LeaveRule_DOT();

	// $ANTLR start "DOT"
	[GrammarRule("DOT")]
	private void mDOT()
	{
		EnterRule_DOT();
		EnterRule("DOT", 17);
		TraceIn("DOT", 17);
		try
		{
			int _type = DOT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:145:5: ( '.' )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:145:7: '.'
			{
			DebugLocation(145, 7);
			Match('.'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DOT", 17);
			LeaveRule("DOT", 17);
			LeaveRule_DOT();
		}
	}
	// $ANTLR end "DOT"

	partial void EnterRule_NEG();
	partial void LeaveRule_NEG();

	// $ANTLR start "NEG"
	[GrammarRule("NEG")]
	private void mNEG()
	{
		EnterRule_NEG();
		EnterRule("NEG", 18);
		TraceIn("NEG", 18);
		try
		{
			int _type = NEG;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:146:5: ( '~' )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:146:7: '~'
			{
			DebugLocation(146, 7);
			Match('~'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NEG", 18);
			LeaveRule("NEG", 18);
			LeaveRule_NEG();
		}
	}
	// $ANTLR end "NEG"

	partial void EnterRule_MULT();
	partial void LeaveRule_MULT();

	// $ANTLR start "MULT"
	[GrammarRule("MULT")]
	private void mMULT()
	{
		EnterRule_MULT();
		EnterRule("MULT", 19);
		TraceIn("MULT", 19);
		try
		{
			int _type = MULT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:147:6: ( '*' )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:147:8: '*'
			{
			DebugLocation(147, 8);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MULT", 19);
			LeaveRule("MULT", 19);
			LeaveRule_MULT();
		}
	}
	// $ANTLR end "MULT"

	partial void EnterRule_DIV();
	partial void LeaveRule_DIV();

	// $ANTLR start "DIV"
	[GrammarRule("DIV")]
	private void mDIV()
	{
		EnterRule_DIV();
		EnterRule("DIV", 20);
		TraceIn("DIV", 20);
		try
		{
			int _type = DIV;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:148:5: ( '/' )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:148:7: '/'
			{
			DebugLocation(148, 7);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DIV", 20);
			LeaveRule("DIV", 20);
			LeaveRule_DIV();
		}
	}
	// $ANTLR end "DIV"

	partial void EnterRule_PLUS();
	partial void LeaveRule_PLUS();

	// $ANTLR start "PLUS"
	[GrammarRule("PLUS")]
	private void mPLUS()
	{
		EnterRule_PLUS();
		EnterRule("PLUS", 21);
		TraceIn("PLUS", 21);
		try
		{
			int _type = PLUS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:149:6: ( '+' )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:149:8: '+'
			{
			DebugLocation(149, 8);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PLUS", 21);
			LeaveRule("PLUS", 21);
			LeaveRule_PLUS();
		}
	}
	// $ANTLR end "PLUS"

	partial void EnterRule_MINUS();
	partial void LeaveRule_MINUS();

	// $ANTLR start "MINUS"
	[GrammarRule("MINUS")]
	private void mMINUS()
	{
		EnterRule_MINUS();
		EnterRule("MINUS", 22);
		TraceIn("MINUS", 22);
		try
		{
			int _type = MINUS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:150:7: ( '-' )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:150:9: '-'
			{
			DebugLocation(150, 9);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MINUS", 22);
			LeaveRule("MINUS", 22);
			LeaveRule_MINUS();
		}
	}
	// $ANTLR end "MINUS"

	partial void EnterRule_LE();
	partial void LeaveRule_LE();

	// $ANTLR start "LE"
	[GrammarRule("LE")]
	private void mLE()
	{
		EnterRule_LE();
		EnterRule("LE", 23);
		TraceIn("LE", 23);
		try
		{
			int _type = LE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:151:4: ( '<=' )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:151:6: '<='
			{
			DebugLocation(151, 6);
			Match("<="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LE", 23);
			LeaveRule("LE", 23);
			LeaveRule_LE();
		}
	}
	// $ANTLR end "LE"

	partial void EnterRule_LT();
	partial void LeaveRule_LT();

	// $ANTLR start "LT"
	[GrammarRule("LT")]
	private void mLT()
	{
		EnterRule_LT();
		EnterRule("LT", 24);
		TraceIn("LT", 24);
		try
		{
			int _type = LT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:152:4: ( '<' )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:152:6: '<'
			{
			DebugLocation(152, 6);
			Match('<'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LT", 24);
			LeaveRule("LT", 24);
			LeaveRule_LT();
		}
	}
	// $ANTLR end "LT"

	partial void EnterRule_GE();
	partial void LeaveRule_GE();

	// $ANTLR start "GE"
	[GrammarRule("GE")]
	private void mGE()
	{
		EnterRule_GE();
		EnterRule("GE", 25);
		TraceIn("GE", 25);
		try
		{
			int _type = GE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:153:4: ( '>=' )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:153:6: '>='
			{
			DebugLocation(153, 6);
			Match(">="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GE", 25);
			LeaveRule("GE", 25);
			LeaveRule_GE();
		}
	}
	// $ANTLR end "GE"

	partial void EnterRule_GT();
	partial void LeaveRule_GT();

	// $ANTLR start "GT"
	[GrammarRule("GT")]
	private void mGT()
	{
		EnterRule_GT();
		EnterRule("GT", 26);
		TraceIn("GT", 26);
		try
		{
			int _type = GT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:154:4: ( '>' )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:154:6: '>'
			{
			DebugLocation(154, 6);
			Match('>'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GT", 26);
			LeaveRule("GT", 26);
			LeaveRule_GT();
		}
	}
	// $ANTLR end "GT"

	partial void EnterRule_EQUAL();
	partial void LeaveRule_EQUAL();

	// $ANTLR start "EQUAL"
	[GrammarRule("EQUAL")]
	private void mEQUAL()
	{
		EnterRule_EQUAL();
		EnterRule("EQUAL", 27);
		TraceIn("EQUAL", 27);
		try
		{
			int _type = EQUAL;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:155:7: ( '==' )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:155:9: '=='
			{
			DebugLocation(155, 9);
			Match("=="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EQUAL", 27);
			LeaveRule("EQUAL", 27);
			LeaveRule_EQUAL();
		}
	}
	// $ANTLR end "EQUAL"

	partial void EnterRule_ASSIGN();
	partial void LeaveRule_ASSIGN();

	// $ANTLR start "ASSIGN"
	[GrammarRule("ASSIGN")]
	private void mASSIGN()
	{
		EnterRule_ASSIGN();
		EnterRule("ASSIGN", 28);
		TraceIn("ASSIGN", 28);
		try
		{
			int _type = ASSIGN;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:156:8: ( '=' )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:156:10: '='
			{
			DebugLocation(156, 10);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASSIGN", 28);
			LeaveRule("ASSIGN", 28);
			LeaveRule_ASSIGN();
		}
	}
	// $ANTLR end "ASSIGN"

	partial void EnterRule_SEMI();
	partial void LeaveRule_SEMI();

	// $ANTLR start "SEMI"
	[GrammarRule("SEMI")]
	private void mSEMI()
	{
		EnterRule_SEMI();
		EnterRule("SEMI", 29);
		TraceIn("SEMI", 29);
		try
		{
			int _type = SEMI;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:157:6: ( ';' )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:157:8: ';'
			{
			DebugLocation(157, 8);
			Match(';'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SEMI", 29);
			LeaveRule("SEMI", 29);
			LeaveRule_SEMI();
		}
	}
	// $ANTLR end "SEMI"

	partial void EnterRule_LPAREN();
	partial void LeaveRule_LPAREN();

	// $ANTLR start "LPAREN"
	[GrammarRule("LPAREN")]
	private void mLPAREN()
	{
		EnterRule_LPAREN();
		EnterRule("LPAREN", 30);
		TraceIn("LPAREN", 30);
		try
		{
			int _type = LPAREN;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:158:8: ( '(' )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:158:10: '('
			{
			DebugLocation(158, 10);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LPAREN", 30);
			LeaveRule("LPAREN", 30);
			LeaveRule_LPAREN();
		}
	}
	// $ANTLR end "LPAREN"

	partial void EnterRule_RPAREN();
	partial void LeaveRule_RPAREN();

	// $ANTLR start "RPAREN"
	[GrammarRule("RPAREN")]
	private void mRPAREN()
	{
		EnterRule_RPAREN();
		EnterRule("RPAREN", 31);
		TraceIn("RPAREN", 31);
		try
		{
			int _type = RPAREN;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:159:8: ( ')' )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:159:10: ')'
			{
			DebugLocation(159, 10);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RPAREN", 31);
			LeaveRule("RPAREN", 31);
			LeaveRule_RPAREN();
		}
	}
	// $ANTLR end "RPAREN"

	partial void EnterRule_LCURLY();
	partial void LeaveRule_LCURLY();

	// $ANTLR start "LCURLY"
	[GrammarRule("LCURLY")]
	private void mLCURLY()
	{
		EnterRule_LCURLY();
		EnterRule("LCURLY", 32);
		TraceIn("LCURLY", 32);
		try
		{
			int _type = LCURLY;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:160:8: ( '{' )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:160:10: '{'
			{
			DebugLocation(160, 10);
			Match('{'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LCURLY", 32);
			LeaveRule("LCURLY", 32);
			LeaveRule_LCURLY();
		}
	}
	// $ANTLR end "LCURLY"

	partial void EnterRule_RCURLY();
	partial void LeaveRule_RCURLY();

	// $ANTLR start "RCURLY"
	[GrammarRule("RCURLY")]
	private void mRCURLY()
	{
		EnterRule_RCURLY();
		EnterRule("RCURLY", 33);
		TraceIn("RCURLY", 33);
		try
		{
			int _type = RCURLY;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:161:8: ( '}' )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:161:10: '}'
			{
			DebugLocation(161, 10);
			Match('}'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RCURLY", 33);
			LeaveRule("RCURLY", 33);
			LeaveRule_RCURLY();
		}
	}
	// $ANTLR end "RCURLY"

	partial void EnterRule_COMMA();
	partial void LeaveRule_COMMA();

	// $ANTLR start "COMMA"
	[GrammarRule("COMMA")]
	private void mCOMMA()
	{
		EnterRule_COMMA();
		EnterRule("COMMA", 34);
		TraceIn("COMMA", 34);
		try
		{
			int _type = COMMA;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:162:7: ( ',' )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:162:9: ','
			{
			DebugLocation(162, 9);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMA", 34);
			LeaveRule("COMMA", 34);
			LeaveRule_COMMA();
		}
	}
	// $ANTLR end "COMMA"

	partial void EnterRule_COLON();
	partial void LeaveRule_COLON();

	// $ANTLR start "COLON"
	[GrammarRule("COLON")]
	private void mCOLON()
	{
		EnterRule_COLON();
		EnterRule("COLON", 35);
		TraceIn("COLON", 35);
		try
		{
			int _type = COLON;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:163:7: ( ':' )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:163:9: ':'
			{
			DebugLocation(163, 9);
			Match(':'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COLON", 35);
			LeaveRule("COLON", 35);
			LeaveRule_COLON();
		}
	}
	// $ANTLR end "COLON"

	partial void EnterRule_IntTypeName();
	partial void LeaveRule_IntTypeName();

	// $ANTLR start "IntTypeName"
	[GrammarRule("IntTypeName")]
	private void mIntTypeName()
	{
		EnterRule_IntTypeName();
		EnterRule("IntTypeName", 36);
		TraceIn("IntTypeName", 36);
		try
		{
			int _type = IntTypeName;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:165:13: ( 'int' )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:165:15: 'int'
			{
			DebugLocation(165, 15);
			Match("int"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IntTypeName", 36);
			LeaveRule("IntTypeName", 36);
			LeaveRule_IntTypeName();
		}
	}
	// $ANTLR end "IntTypeName"

	partial void EnterRule_FloatTypeName();
	partial void LeaveRule_FloatTypeName();

	// $ANTLR start "FloatTypeName"
	[GrammarRule("FloatTypeName")]
	private void mFloatTypeName()
	{
		EnterRule_FloatTypeName();
		EnterRule("FloatTypeName", 37);
		TraceIn("FloatTypeName", 37);
		try
		{
			int _type = FloatTypeName;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:166:15: ( 'float' )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:166:17: 'float'
			{
			DebugLocation(166, 17);
			Match("float"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FloatTypeName", 37);
			LeaveRule("FloatTypeName", 37);
			LeaveRule_FloatTypeName();
		}
	}
	// $ANTLR end "FloatTypeName"

	partial void EnterRule_BoolTypeName();
	partial void LeaveRule_BoolTypeName();

	// $ANTLR start "BoolTypeName"
	[GrammarRule("BoolTypeName")]
	private void mBoolTypeName()
	{
		EnterRule_BoolTypeName();
		EnterRule("BoolTypeName", 38);
		TraceIn("BoolTypeName", 38);
		try
		{
			int _type = BoolTypeName;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:167:14: ( 'bool' )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:167:17: 'bool'
			{
			DebugLocation(167, 17);
			Match("bool"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BoolTypeName", 38);
			LeaveRule("BoolTypeName", 38);
			LeaveRule_BoolTypeName();
		}
	}
	// $ANTLR end "BoolTypeName"

	partial void EnterRule_CharTypeName();
	partial void LeaveRule_CharTypeName();

	// $ANTLR start "CharTypeName"
	[GrammarRule("CharTypeName")]
	private void mCharTypeName()
	{
		EnterRule_CharTypeName();
		EnterRule("CharTypeName", 39);
		TraceIn("CharTypeName", 39);
		try
		{
			int _type = CharTypeName;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:168:14: ( 'char' )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:168:16: 'char'
			{
			DebugLocation(168, 16);
			Match("char"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CharTypeName", 39);
			LeaveRule("CharTypeName", 39);
			LeaveRule_CharTypeName();
		}
	}
	// $ANTLR end "CharTypeName"

	partial void EnterRule_StringTypeName();
	partial void LeaveRule_StringTypeName();

	// $ANTLR start "StringTypeName"
	[GrammarRule("StringTypeName")]
	private void mStringTypeName()
	{
		EnterRule_StringTypeName();
		EnterRule("StringTypeName", 40);
		TraceIn("StringTypeName", 40);
		try
		{
			int _type = StringTypeName;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:169:16: ( 'string' )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:169:18: 'string'
			{
			DebugLocation(169, 18);
			Match("string"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("StringTypeName", 40);
			LeaveRule("StringTypeName", 40);
			LeaveRule_StringTypeName();
		}
	}
	// $ANTLR end "StringTypeName"

	partial void EnterRule_ObjectTypeName();
	partial void LeaveRule_ObjectTypeName();

	// $ANTLR start "ObjectTypeName"
	[GrammarRule("ObjectTypeName")]
	private void mObjectTypeName()
	{
		EnterRule_ObjectTypeName();
		EnterRule("ObjectTypeName", 41);
		TraceIn("ObjectTypeName", 41);
		try
		{
			int _type = ObjectTypeName;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:170:16: ( 'object' )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:170:18: 'object'
			{
			DebugLocation(170, 18);
			Match("object"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ObjectTypeName", 41);
			LeaveRule("ObjectTypeName", 41);
			LeaveRule_ObjectTypeName();
		}
	}
	// $ANTLR end "ObjectTypeName"

	partial void EnterRule_MULTILINE_COMMENT();
	partial void LeaveRule_MULTILINE_COMMENT();

	// $ANTLR start "MULTILINE_COMMENT"
	[GrammarRule("MULTILINE_COMMENT")]
	private void mMULTILINE_COMMENT()
	{
		EnterRule_MULTILINE_COMMENT();
		EnterRule("MULTILINE_COMMENT", 42);
		TraceIn("MULTILINE_COMMENT", 42);
		try
		{
			int _type = MULTILINE_COMMENT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:173:2: ( '/*' ( . )* '*/' )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:173:5: '/*' ( . )* '*/'
			{
			DebugLocation(173, 5);
			Match("/*"); 

			DebugLocation(173, 10);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:173:10: ( . )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0=='*'))
				{
					int LA1_1 = input.LA(2);

					if ((LA1_1=='/'))
					{
						alt1 = 2;
					}
					else if (((LA1_1>='\u0000' && LA1_1<='.')||(LA1_1>='0' && LA1_1<='\uFFFF')))
					{
						alt1 = 1;
					}


				}
				else if (((LA1_0>='\u0000' && LA1_0<=')')||(LA1_0>='+' && LA1_0<='\uFFFF')))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:173:10: .
					{
					DebugLocation(173, 10);
					MatchAny(); 

					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(173, 13);
			Match("*/"); 

			DebugLocation(173, 18);
			_channel = Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MULTILINE_COMMENT", 42);
			LeaveRule("MULTILINE_COMMENT", 42);
			LeaveRule_MULTILINE_COMMENT();
		}
	}
	// $ANTLR end "MULTILINE_COMMENT"

	partial void EnterRule_STRING();
	partial void LeaveRule_STRING();

	// $ANTLR start "STRING"
	[GrammarRule("STRING")]
	private void mSTRING()
	{
		EnterRule_STRING();
		EnterRule("STRING", 43);
		TraceIn("STRING", 43);
		try
		{
			int _type = STRING;
			int _channel = DefaultTokenChannel;
			int c = 0;

			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:175:8: ( '\"' ( '\"' '\"' |c=~ ( '\"' | '\\r' | '\\n' ) )* '\"' )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:175:10: '\"' ( '\"' '\"' |c=~ ( '\"' | '\\r' | '\\n' ) )* '\"'
			{
			DebugLocation(175, 10);
			Match('\"'); 
			DebugLocation(176, 3);
			 StringBuilder b = new StringBuilder(); 
			DebugLocation(177, 3);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:177:3: ( '\"' '\"' |c=~ ( '\"' | '\\r' | '\\n' ) )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=3;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if ((LA2_0=='\"'))
				{
					int LA2_1 = input.LA(2);

					if ((LA2_1=='\"'))
					{
						alt2 = 1;
					}


				}
				else if (((LA2_0>='\u0000' && LA2_0<='\t')||(LA2_0>='\u000B' && LA2_0<='\f')||(LA2_0>='\u000E' && LA2_0<='!')||(LA2_0>='#' && LA2_0<='\uFFFF')))
				{
					alt2 = 2;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:177:5: '\"' '\"'
					{
					DebugLocation(177, 5);
					Match('\"'); 
					DebugLocation(177, 9);
					Match('\"'); 
					DebugLocation(177, 16);
					 b.Append('"');

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:178:5: c=~ ( '\"' | '\\r' | '\\n' )
					{
					DebugLocation(178, 6);
					c= input.LA(1);
					input.Consume();

					DebugLocation(178, 24);
					 b.Append((char)c);

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(180, 3);
			Match('\"'); 
			DebugLocation(181, 3);
			 Text = b.ToString(); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING", 43);
			LeaveRule("STRING", 43);
			LeaveRule_STRING();
		}
	}
	// $ANTLR end "STRING"

	partial void EnterRule_LETTER();
	partial void LeaveRule_LETTER();

	// $ANTLR start "LETTER"
	[GrammarRule("LETTER")]
	private void mLETTER()
	{
		EnterRule_LETTER();
		EnterRule("LETTER", 44);
		TraceIn("LETTER", 44);
		try
		{
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:184:17: ( ( 'a' .. 'z' | 'A' .. 'Z' ) )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:
			{
			DebugLocation(184, 17);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("LETTER", 44);
			LeaveRule("LETTER", 44);
			LeaveRule_LETTER();
		}
	}
	// $ANTLR end "LETTER"

	partial void EnterRule_DIGIT();
	partial void LeaveRule_DIGIT();

	// $ANTLR start "DIGIT"
	[GrammarRule("DIGIT")]
	private void mDIGIT()
	{
		EnterRule_DIGIT();
		EnterRule("DIGIT", 45);
		TraceIn("DIGIT", 45);
		try
		{
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:185:16: ( '0' .. '9' )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:
			{
			DebugLocation(185, 16);
			if ((input.LA(1)>='0' && input.LA(1)<='9'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("DIGIT", 45);
			LeaveRule("DIGIT", 45);
			LeaveRule_DIGIT();
		}
	}
	// $ANTLR end "DIGIT"

	partial void EnterRule_INTEGER();
	partial void LeaveRule_INTEGER();

	// $ANTLR start "INTEGER"
	[GrammarRule("INTEGER")]
	private void mINTEGER()
	{
		EnterRule_INTEGER();
		EnterRule("INTEGER", 46);
		TraceIn("INTEGER", 46);
		try
		{
			int _type = INTEGER;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:186:9: ( ( DIGIT )+ )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:186:11: ( DIGIT )+
			{
			DebugLocation(186, 11);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:186:11: ( DIGIT )+
			int cnt3=0;
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if (((LA3_0>='0' && LA3_0<='9')))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:
					{
					DebugLocation(186, 11);
					input.Consume();


					}
					break;

				default:
					if (cnt3 >= 1)
						goto loop3;

					EarlyExitException eee3 = new EarlyExitException( 3, input );
					DebugRecognitionException(eee3);
					throw eee3;
				}
				cnt3++;
			}
			loop3:
				;

			} finally { DebugExitSubRule(3); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INTEGER", 46);
			LeaveRule("INTEGER", 46);
			LeaveRule_INTEGER();
		}
	}
	// $ANTLR end "INTEGER"

	partial void EnterRule_CHAR();
	partial void LeaveRule_CHAR();

	// $ANTLR start "CHAR"
	[GrammarRule("CHAR")]
	private void mCHAR()
	{
		EnterRule_CHAR();
		EnterRule("CHAR", 47);
		TraceIn("CHAR", 47);
		try
		{
			int _type = CHAR;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:187:6: ( '\\'' LETTER '\\'' )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:187:8: '\\'' LETTER '\\''
			{
			DebugLocation(187, 8);
			Match('\''); 
			DebugLocation(187, 13);
			mLETTER(); 
			DebugLocation(187, 20);
			Match('\''); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CHAR", 47);
			LeaveRule("CHAR", 47);
			LeaveRule_CHAR();
		}
	}
	// $ANTLR end "CHAR"

	partial void EnterRule_FLOAT();
	partial void LeaveRule_FLOAT();

	// $ANTLR start "FLOAT"
	[GrammarRule("FLOAT")]
	private void mFLOAT()
	{
		EnterRule_FLOAT();
		EnterRule("FLOAT", 48);
		TraceIn("FLOAT", 48);
		try
		{
			int _type = FLOAT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:188:7: ( ( DIGIT )+ '.' ( DIGIT )+ )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:188:9: ( DIGIT )+ '.' ( DIGIT )+
			{
			DebugLocation(188, 9);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:188:9: ( DIGIT )+
			int cnt4=0;
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_0 = input.LA(1);

				if (((LA4_0>='0' && LA4_0<='9')))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:
					{
					DebugLocation(188, 9);
					input.Consume();


					}
					break;

				default:
					if (cnt4 >= 1)
						goto loop4;

					EarlyExitException eee4 = new EarlyExitException( 4, input );
					DebugRecognitionException(eee4);
					throw eee4;
				}
				cnt4++;
			}
			loop4:
				;

			} finally { DebugExitSubRule(4); }

			DebugLocation(188, 16);
			Match('.'); 
			DebugLocation(188, 20);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:188:20: ( DIGIT )+
			int cnt5=0;
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if (((LA5_0>='0' && LA5_0<='9')))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:
					{
					DebugLocation(188, 20);
					input.Consume();


					}
					break;

				default:
					if (cnt5 >= 1)
						goto loop5;

					EarlyExitException eee5 = new EarlyExitException( 5, input );
					DebugRecognitionException(eee5);
					throw eee5;
				}
				cnt5++;
			}
			loop5:
				;

			} finally { DebugExitSubRule(5); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FLOAT", 48);
			LeaveRule("FLOAT", 48);
			LeaveRule_FLOAT();
		}
	}
	// $ANTLR end "FLOAT"

	partial void EnterRule_ID();
	partial void LeaveRule_ID();

	// $ANTLR start "ID"
	[GrammarRule("ID")]
	private void mID()
	{
		EnterRule_ID();
		EnterRule("ID", 49);
		TraceIn("ID", 49);
		try
		{
			int _type = ID;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:189:4: ( LETTER ( LETTER | DIGIT | '_' )* )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:189:6: LETTER ( LETTER | DIGIT | '_' )*
			{
			DebugLocation(189, 6);
			mLETTER(); 
			DebugLocation(189, 13);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:189:13: ( LETTER | DIGIT | '_' )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if (((LA6_0>='0' && LA6_0<='9')||(LA6_0>='A' && LA6_0<='Z')||LA6_0=='_'||(LA6_0>='a' && LA6_0<='z')))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:
					{
					DebugLocation(189, 13);
					input.Consume();


					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ID", 49);
			LeaveRule("ID", 49);
			LeaveRule_ID();
		}
	}
	// $ANTLR end "ID"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 50);
		TraceIn("WS", 50);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:190:4: ( ( ' ' | '\\t' | '\\n' | '\\r' | '\\f' )+ )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:190:6: ( ' ' | '\\t' | '\\n' | '\\r' | '\\f' )+
			{
			DebugLocation(190, 6);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:190:6: ( ' ' | '\\t' | '\\n' | '\\r' | '\\f' )+
			int cnt7=0;
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if (((LA7_0>='\t' && LA7_0<='\n')||(LA7_0>='\f' && LA7_0<='\r')||LA7_0==' '))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:
					{
					DebugLocation(190, 6);
					input.Consume();


					}
					break;

				default:
					if (cnt7 >= 1)
						goto loop7;

					EarlyExitException eee7 = new EarlyExitException( 7, input );
					DebugRecognitionException(eee7);
					throw eee7;
				}
				cnt7++;
			}
			loop7:
				;

			} finally { DebugExitSubRule(7); }

			DebugLocation(190, 41);
			_channel = Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 50);
			LeaveRule("WS", 50);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	partial void EnterRule_COMMENT();
	partial void LeaveRule_COMMENT();

	// $ANTLR start "COMMENT"
	[GrammarRule("COMMENT")]
	private void mCOMMENT()
	{
		EnterRule_COMMENT();
		EnterRule("COMMENT", 51);
		TraceIn("COMMENT", 51);
		try
		{
			int _type = COMMENT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:191:9: ( '//' ( . )* ( '\\n' | '\\r' ) )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:191:11: '//' ( . )* ( '\\n' | '\\r' )
			{
			DebugLocation(191, 11);
			Match("//"); 

			DebugLocation(191, 16);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:191:16: ( . )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_0 = input.LA(1);

				if ((LA8_0=='\n'||LA8_0=='\r'))
				{
					alt8 = 2;
				}
				else if (((LA8_0>='\u0000' && LA8_0<='\t')||(LA8_0>='\u000B' && LA8_0<='\f')||(LA8_0>='\u000E' && LA8_0<='\uFFFF')))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:191:16: .
					{
					DebugLocation(191, 16);
					MatchAny(); 

					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }

			DebugLocation(191, 19);
			if (input.LA(1)=='\n'||input.LA(1)=='\r')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(191, 31);
			_channel = Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMENT", 51);
			LeaveRule("COMMENT", 51);
			LeaveRule_COMMENT();
		}
	}
	// $ANTLR end "COMMENT"

	partial void EnterRule_FALL_THROUGH();
	partial void LeaveRule_FALL_THROUGH();

	// $ANTLR start "FALL_THROUGH"
	[GrammarRule("FALL_THROUGH")]
	private void mFALL_THROUGH()
	{
		EnterRule_FALL_THROUGH();
		EnterRule("FALL_THROUGH", 52);
		TraceIn("FALL_THROUGH", 52);
		try
		{
			int _type = FALL_THROUGH;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:193:3: ( . )
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:193:6: .
			{
			DebugLocation(193, 6);
			MatchAny(); 
			DebugLocation(193, 9);
			DebugRecognitionException(new NoViableAltException("Unknown lexem: " + Text, 5, 1, input, 1));

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FALL_THROUGH", 52);
			LeaveRule("FALL_THROUGH", 52);
			LeaveRule_FALL_THROUGH();
		}
	}
	// $ANTLR end "FALL_THROUGH"

	public override void mTokens()
	{
		// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:8: ( CLASS | ELSE | FALSE | ENDIF | IF | RETURN | ISVOID | VAR | LOOP | ENDLOOP | THEN | WHILE | NEW | NOT | TRUE | VOID | DOT | NEG | MULT | DIV | PLUS | MINUS | LE | LT | GE | GT | EQUAL | ASSIGN | SEMI | LPAREN | RPAREN | LCURLY | RCURLY | COMMA | COLON | IntTypeName | FloatTypeName | BoolTypeName | CharTypeName | StringTypeName | ObjectTypeName | MULTILINE_COMMENT | STRING | INTEGER | CHAR | FLOAT | ID | WS | COMMENT | FALL_THROUGH )
		int alt9=50;
		try { DebugEnterDecision(9, false);
		try
		{
			alt9 = dfa9.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(9); }
		switch (alt9)
		{
		case 1:
			DebugEnterAlt(1);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:10: CLASS
			{
			DebugLocation(1, 10);
			mCLASS(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:16: ELSE
			{
			DebugLocation(1, 16);
			mELSE(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:21: FALSE
			{
			DebugLocation(1, 21);
			mFALSE(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:27: ENDIF
			{
			DebugLocation(1, 27);
			mENDIF(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:33: IF
			{
			DebugLocation(1, 33);
			mIF(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:36: RETURN
			{
			DebugLocation(1, 36);
			mRETURN(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:43: ISVOID
			{
			DebugLocation(1, 43);
			mISVOID(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:50: VAR
			{
			DebugLocation(1, 50);
			mVAR(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:54: LOOP
			{
			DebugLocation(1, 54);
			mLOOP(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:59: ENDLOOP
			{
			DebugLocation(1, 59);
			mENDLOOP(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:67: THEN
			{
			DebugLocation(1, 67);
			mTHEN(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:72: WHILE
			{
			DebugLocation(1, 72);
			mWHILE(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:78: NEW
			{
			DebugLocation(1, 78);
			mNEW(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:82: NOT
			{
			DebugLocation(1, 82);
			mNOT(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:86: TRUE
			{
			DebugLocation(1, 86);
			mTRUE(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:91: VOID
			{
			DebugLocation(1, 91);
			mVOID(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:96: DOT
			{
			DebugLocation(1, 96);
			mDOT(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:100: NEG
			{
			DebugLocation(1, 100);
			mNEG(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:104: MULT
			{
			DebugLocation(1, 104);
			mMULT(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:109: DIV
			{
			DebugLocation(1, 109);
			mDIV(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:113: PLUS
			{
			DebugLocation(1, 113);
			mPLUS(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:118: MINUS
			{
			DebugLocation(1, 118);
			mMINUS(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:124: LE
			{
			DebugLocation(1, 124);
			mLE(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:127: LT
			{
			DebugLocation(1, 127);
			mLT(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:130: GE
			{
			DebugLocation(1, 130);
			mGE(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:133: GT
			{
			DebugLocation(1, 133);
			mGT(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:136: EQUAL
			{
			DebugLocation(1, 136);
			mEQUAL(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:142: ASSIGN
			{
			DebugLocation(1, 142);
			mASSIGN(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:149: SEMI
			{
			DebugLocation(1, 149);
			mSEMI(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:154: LPAREN
			{
			DebugLocation(1, 154);
			mLPAREN(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:161: RPAREN
			{
			DebugLocation(1, 161);
			mRPAREN(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:168: LCURLY
			{
			DebugLocation(1, 168);
			mLCURLY(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:175: RCURLY
			{
			DebugLocation(1, 175);
			mRCURLY(); 

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:182: COMMA
			{
			DebugLocation(1, 182);
			mCOMMA(); 

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:188: COLON
			{
			DebugLocation(1, 188);
			mCOLON(); 

			}
			break;
		case 36:
			DebugEnterAlt(36);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:194: IntTypeName
			{
			DebugLocation(1, 194);
			mIntTypeName(); 

			}
			break;
		case 37:
			DebugEnterAlt(37);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:206: FloatTypeName
			{
			DebugLocation(1, 206);
			mFloatTypeName(); 

			}
			break;
		case 38:
			DebugEnterAlt(38);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:220: BoolTypeName
			{
			DebugLocation(1, 220);
			mBoolTypeName(); 

			}
			break;
		case 39:
			DebugEnterAlt(39);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:233: CharTypeName
			{
			DebugLocation(1, 233);
			mCharTypeName(); 

			}
			break;
		case 40:
			DebugEnterAlt(40);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:246: StringTypeName
			{
			DebugLocation(1, 246);
			mStringTypeName(); 

			}
			break;
		case 41:
			DebugEnterAlt(41);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:261: ObjectTypeName
			{
			DebugLocation(1, 261);
			mObjectTypeName(); 

			}
			break;
		case 42:
			DebugEnterAlt(42);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:276: MULTILINE_COMMENT
			{
			DebugLocation(1, 276);
			mMULTILINE_COMMENT(); 

			}
			break;
		case 43:
			DebugEnterAlt(43);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:294: STRING
			{
			DebugLocation(1, 294);
			mSTRING(); 

			}
			break;
		case 44:
			DebugEnterAlt(44);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:301: INTEGER
			{
			DebugLocation(1, 301);
			mINTEGER(); 

			}
			break;
		case 45:
			DebugEnterAlt(45);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:309: CHAR
			{
			DebugLocation(1, 309);
			mCHAR(); 

			}
			break;
		case 46:
			DebugEnterAlt(46);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:314: FLOAT
			{
			DebugLocation(1, 314);
			mFLOAT(); 

			}
			break;
		case 47:
			DebugEnterAlt(47);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:320: ID
			{
			DebugLocation(1, 320);
			mID(); 

			}
			break;
		case 48:
			DebugEnterAlt(48);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:323: WS
			{
			DebugLocation(1, 323);
			mWS(); 

			}
			break;
		case 49:
			DebugEnterAlt(49);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:326: COMMENT
			{
			DebugLocation(1, 326);
			mCOMMENT(); 

			}
			break;
		case 50:
			DebugEnterAlt(50);
			// C:\\Users\\F1nZeR\\Desktop\\OVSYANNIKOV\\CK.g:1:334: FALL_THROUGH
			{
			DebugLocation(1, 334);
			mFALL_THROUGH(); 

			}
			break;

		}

	}


	#region DFA
	DFA9 dfa9;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa9 = new DFA9(this, SpecialStateTransition9);
	}

	private class DFA9 : DFA
	{
		private const string DFA9_eotS =
			"\x1\xFFFF\xA\x26\x3\xFFFF\x1\x3C\x2\xFFFF\x1\x40\x1\x42\x1\x44\x7\xFFFF"+
			"\x3\x26\x1\x23\x1\x50\x1\x23\x3\xFFFF\x2\x26\x1\xFFFF\x4\x26\x1\x5B\xB"+
			"\x26\x15\xFFFF\x3\x26\x2\xFFFF\x1\x50\x3\xFFFF\x6\x26\x1\xFFFF\x1\x26"+
			"\x1\x72\x1\x26\x1\x74\x5\x26\x1\x7A\x1\x7B\x4\x26\x1\x80\x1\x81\x5\x26"+
			"\x1\xFFFF\x1\x26\x1\xFFFF\x1\x88\x1\x89\x1\x8A\x1\x8B\x1\x26\x2\xFFFF"+
			"\x1\x8D\x2\x26\x1\x90\x2\xFFFF\x1\x91\x1\x26\x1\x93\x1\x94\x2\x26\x4"+
			"\xFFFF\x1\x97\x1\xFFFF\x2\x26\x2\xFFFF\x1\x26\x2\xFFFF\x1\x9B\x1\x9C"+
			"\x1\xFFFF\x1\x9D\x1\x9E\x1\x9F\x5\xFFFF";
		private const string DFA9_eofS =
			"\xA0\xFFFF";
		private const string DFA9_minS =
			"\x1\x0\x1\x68\x1\x6C\x1\x61\x1\x66\x1\x65\x1\x61\x1\x6F\x2\x68\x1\x65"+
			"\x3\xFFFF\x1\x2A\x2\xFFFF\x3\x3D\x7\xFFFF\x1\x6F\x1\x74\x1\x62\x1\x0"+
			"\x1\x2E\x1\x41\x3\xFFFF\x2\x61\x1\xFFFF\x1\x73\x1\x64\x1\x6C\x1\x6F\x1"+
			"\x30\x1\x76\x2\x74\x1\x72\x1\x69\x1\x6F\x1\x65\x1\x75\x1\x69\x1\x77\x1"+
			"\x74\x15\xFFFF\x1\x6F\x1\x72\x1\x6A\x2\xFFFF\x1\x2E\x3\xFFFF\x1\x73\x1"+
			"\x72\x1\x65\x1\x69\x1\x73\x1\x61\x1\xFFFF\x1\x6F\x1\x30\x1\x75\x1\x30"+
			"\x1\x64\x1\x70\x1\x6E\x1\x65\x1\x6C\x2\x30\x1\x6C\x1\x69\x1\x65\x1\x73"+
			"\x2\x30\x1\x66\x1\x6F\x1\x65\x1\x74\x1\x69\x1\xFFFF\x1\x72\x1\xFFFF\x4"+
			"\x30\x1\x65\x2\xFFFF\x1\x30\x1\x6E\x1\x63\x1\x30\x2\xFFFF\x1\x30\x1\x6F"+
			"\x2\x30\x1\x64\x1\x6E\x4\xFFFF\x1\x30\x1\xFFFF\x1\x67\x1\x74\x2\xFFFF"+
			"\x1\x70\x2\xFFFF\x2\x30\x1\xFFFF\x3\x30\x5\xFFFF";
		private const string DFA9_maxS =
			"\x1\xFFFF\x1\x6C\x1\x6E\x1\x6C\x1\x73\x1\x65\x2\x6F\x1\x72\x1\x68\x1"+
			"\x6F\x3\xFFFF\x1\x2F\x2\xFFFF\x3\x3D\x7\xFFFF\x1\x6F\x1\x74\x1\x62\x1"+
			"\xFFFF\x1\x39\x1\x7A\x3\xFFFF\x2\x61\x1\xFFFF\x1\x73\x1\x64\x1\x6C\x1"+
			"\x6F\x1\x7A\x1\x76\x2\x74\x1\x72\x1\x69\x1\x6F\x1\x65\x1\x75\x1\x69\x1"+
			"\x77\x1\x74\x15\xFFFF\x1\x6F\x1\x72\x1\x6A\x2\xFFFF\x1\x39\x3\xFFFF\x1"+
			"\x73\x1\x72\x1\x65\x1\x6C\x1\x73\x1\x61\x1\xFFFF\x1\x6F\x1\x7A\x1\x75"+
			"\x1\x7A\x1\x64\x1\x70\x1\x6E\x1\x65\x1\x6C\x2\x7A\x1\x6C\x1\x69\x1\x65"+
			"\x1\x73\x2\x7A\x1\x66\x1\x6F\x1\x65\x1\x74\x1\x69\x1\xFFFF\x1\x72\x1"+
			"\xFFFF\x4\x7A\x1\x65\x2\xFFFF\x1\x7A\x1\x6E\x1\x63\x1\x7A\x2\xFFFF\x1"+
			"\x7A\x1\x6F\x2\x7A\x1\x64\x1\x6E\x4\xFFFF\x1\x7A\x1\xFFFF\x1\x67\x1\x74"+
			"\x2\xFFFF\x1\x70\x2\xFFFF\x2\x7A\x1\xFFFF\x3\x7A\x5\xFFFF";
		private const string DFA9_acceptS =
			"\xB\xFFFF\x1\x11\x1\x12\x1\x13\x1\xFFFF\x1\x15\x1\x16\x3\xFFFF\x1\x1D"+
			"\x1\x1E\x1\x1F\x1\x20\x1\x21\x1\x22\x1\x23\x6\xFFFF\x1\x2F\x1\x30\x1"+
			"\x32\x2\xFFFF\x1\x2F\x10\xFFFF\x1\x11\x1\x12\x1\x13\x1\x2A\x1\x31\x1"+
			"\x14\x1\x15\x1\x16\x1\x17\x1\x18\x1\x19\x1\x1A\x1\x1B\x1\x1C\x1\x1D\x1"+
			"\x1E\x1\x1F\x1\x20\x1\x21\x1\x22\x1\x23\x3\xFFFF\x1\x2B\x1\x2C\x1\xFFFF"+
			"\x1\x2E\x1\x2D\x1\x30\x6\xFFFF\x1\x5\x16\xFFFF\x1\x24\x1\xFFFF\x1\x8"+
			"\x5\xFFFF\x1\xD\x1\xE\x4\xFFFF\x1\x27\x1\x2\x6\xFFFF\x1\x10\x1\x9\x1"+
			"\xB\x1\xF\x1\xFFFF\x1\x26\x2\xFFFF\x1\x1\x1\x4\x1\xFFFF\x1\x3\x1\x25"+
			"\x2\xFFFF\x1\xC\x3\xFFFF\x1\x7\x1\x6\x1\x28\x1\x29\x1\xA";
		private const string DFA9_specialS =
			"\x1\x0\x1D\xFFFF\x1\x1\x81\xFFFF}>";
		private static readonly string[] DFA9_transitionS =
			{
				"\x9\x23\x2\x22\x1\x23\x2\x22\x12\x23\x1\x22\x1\x23\x1\x1E\x4\x23\x1"+
				"\x20\x1\x15\x1\x16\x1\xD\x1\xF\x1\x19\x1\x10\x1\xB\x1\xE\xA\x1F\x1\x1A"+
				"\x1\x14\x1\x11\x1\x13\x1\x12\x2\x23\x1A\x21\x6\x23\x1\x21\x1\x1B\x1"+
				"\x1\x1\x21\x1\x2\x1\x3\x2\x21\x1\x4\x2\x21\x1\x7\x1\x21\x1\xA\x1\x1D"+
				"\x2\x21\x1\x5\x1\x1C\x1\x8\x1\x21\x1\x6\x1\x9\x3\x21\x1\x17\x1\x23\x1"+
				"\x18\x1\xC\xFF81\x23",
				"\x1\x25\x3\xFFFF\x1\x24",
				"\x1\x27\x1\xFFFF\x1\x28",
				"\x1\x29\xA\xFFFF\x1\x2A",
				"\x1\x2B\x7\xFFFF\x1\x2D\x4\xFFFF\x1\x2C",
				"\x1\x2E",
				"\x1\x2F\xD\xFFFF\x1\x30",
				"\x1\x31",
				"\x1\x32\x9\xFFFF\x1\x33",
				"\x1\x34",
				"\x1\x35\x9\xFFFF\x1\x36",
				"",
				"",
				"",
				"\x1\x3A\x4\xFFFF\x1\x3B",
				"",
				"",
				"\x1\x3F",
				"\x1\x41",
				"\x1\x43",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x4C",
				"\x1\x4D",
				"\x1\x4E",
				"\xA\x4F\x1\xFFFF\x2\x4F\x1\xFFFF\xFFF2\x4F",
				"\x1\x52\x1\xFFFF\xA\x51",
				"\x1A\x53\x6\xFFFF\x1A\x53",
				"",
				"",
				"",
				"\x1\x55",
				"\x1\x56",
				"",
				"\x1\x57",
				"\x1\x58",
				"\x1\x59",
				"\x1\x5A",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"\x1\x5C",
				"\x1\x5D",
				"\x1\x5E",
				"\x1\x5F",
				"\x1\x60",
				"\x1\x61",
				"\x1\x62",
				"\x1\x63",
				"\x1\x64",
				"\x1\x65",
				"\x1\x66",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x67",
				"\x1\x68",
				"\x1\x69",
				"",
				"",
				"\x1\x52\x1\xFFFF\xA\x51",
				"",
				"",
				"",
				"\x1\x6A",
				"\x1\x6B",
				"\x1\x6C",
				"\x1\x6D\x2\xFFFF\x1\x6E",
				"\x1\x6F",
				"\x1\x70",
				"",
				"\x1\x71",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"\x1\x73",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"\x1\x75",
				"\x1\x76",
				"\x1\x77",
				"\x1\x78",
				"\x1\x79",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"\x1\x7C",
				"\x1\x7D",
				"\x1\x7E",
				"\x1\x7F",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"\x1\x82",
				"\x1\x83",
				"\x1\x84",
				"\x1\x85",
				"\x1\x86",
				"",
				"\x1\x87",
				"",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"\x1\x8C",
				"",
				"",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"\x1\x8E",
				"\x1\x8F",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"",
				"",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"\x1\x92",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"\x1\x95",
				"\x1\x96",
				"",
				"",
				"",
				"",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"",
				"\x1\x98",
				"\x1\x99",
				"",
				"",
				"\x1\x9A",
				"",
				"",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA9_eot = DFA.UnpackEncodedString(DFA9_eotS);
		private static readonly short[] DFA9_eof = DFA.UnpackEncodedString(DFA9_eofS);
		private static readonly char[] DFA9_min = DFA.UnpackEncodedStringToUnsignedChars(DFA9_minS);
		private static readonly char[] DFA9_max = DFA.UnpackEncodedStringToUnsignedChars(DFA9_maxS);
		private static readonly short[] DFA9_accept = DFA.UnpackEncodedString(DFA9_acceptS);
		private static readonly short[] DFA9_special = DFA.UnpackEncodedString(DFA9_specialS);
		private static readonly short[][] DFA9_transition;

		static DFA9()
		{
			int numStates = DFA9_transitionS.Length;
			DFA9_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA9_transition[i] = DFA.UnpackEncodedString(DFA9_transitionS[i]);
			}
		}

		public DFA9( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 9;
			this.eot = DFA9_eot;
			this.eof = DFA9_eof;
			this.min = DFA9_min;
			this.max = DFA9_max;
			this.accept = DFA9_accept;
			this.special = DFA9_special;
			this.transition = DFA9_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( CLASS | ELSE | FALSE | ENDIF | IF | RETURN | ISVOID | VAR | LOOP | ENDLOOP | THEN | WHILE | NEW | NOT | TRUE | VOID | DOT | NEG | MULT | DIV | PLUS | MINUS | LE | LT | GE | GT | EQUAL | ASSIGN | SEMI | LPAREN | RPAREN | LCURLY | RCURLY | COMMA | COLON | IntTypeName | FloatTypeName | BoolTypeName | CharTypeName | StringTypeName | ObjectTypeName | MULTILINE_COMMENT | STRING | INTEGER | CHAR | FLOAT | ID | WS | COMMENT | FALL_THROUGH );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition9(DFA dfa, int s, IIntStream _input)
	{
		IIntStream input = _input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA9_0 = input.LA(1);

				s = -1;
				if ((LA9_0=='c')) {s = 1;}

				else if ((LA9_0=='e')) {s = 2;}

				else if ((LA9_0=='f')) {s = 3;}

				else if ((LA9_0=='i')) {s = 4;}

				else if ((LA9_0=='r')) {s = 5;}

				else if ((LA9_0=='v')) {s = 6;}

				else if ((LA9_0=='l')) {s = 7;}

				else if ((LA9_0=='t')) {s = 8;}

				else if ((LA9_0=='w')) {s = 9;}

				else if ((LA9_0=='n')) {s = 10;}

				else if ((LA9_0=='.')) {s = 11;}

				else if ((LA9_0=='~')) {s = 12;}

				else if ((LA9_0=='*')) {s = 13;}

				else if ((LA9_0=='/')) {s = 14;}

				else if ((LA9_0=='+')) {s = 15;}

				else if ((LA9_0=='-')) {s = 16;}

				else if ((LA9_0=='<')) {s = 17;}

				else if ((LA9_0=='>')) {s = 18;}

				else if ((LA9_0=='=')) {s = 19;}

				else if ((LA9_0==';')) {s = 20;}

				else if ((LA9_0=='(')) {s = 21;}

				else if ((LA9_0==')')) {s = 22;}

				else if ((LA9_0=='{')) {s = 23;}

				else if ((LA9_0=='}')) {s = 24;}

				else if ((LA9_0==',')) {s = 25;}

				else if ((LA9_0==':')) {s = 26;}

				else if ((LA9_0=='b')) {s = 27;}

				else if ((LA9_0=='s')) {s = 28;}

				else if ((LA9_0=='o')) {s = 29;}

				else if ((LA9_0=='\"')) {s = 30;}

				else if (((LA9_0>='0' && LA9_0<='9'))) {s = 31;}

				else if ((LA9_0=='\'')) {s = 32;}

				else if (((LA9_0>='A' && LA9_0<='Z')||LA9_0=='a'||LA9_0=='d'||(LA9_0>='g' && LA9_0<='h')||(LA9_0>='j' && LA9_0<='k')||LA9_0=='m'||(LA9_0>='p' && LA9_0<='q')||LA9_0=='u'||(LA9_0>='x' && LA9_0<='z'))) {s = 33;}

				else if (((LA9_0>='\t' && LA9_0<='\n')||(LA9_0>='\f' && LA9_0<='\r')||LA9_0==' ')) {s = 34;}

				else if (((LA9_0>='\u0000' && LA9_0<='\b')||LA9_0=='\u000B'||(LA9_0>='\u000E' && LA9_0<='\u001F')||LA9_0=='!'||(LA9_0>='#' && LA9_0<='&')||(LA9_0>='?' && LA9_0<='@')||(LA9_0>='[' && LA9_0<='`')||LA9_0=='|'||(LA9_0>='\u007F' && LA9_0<='\uFFFF'))) {s = 35;}

				if (s >= 0) return s;
				break;

			case 1:
				int LA9_30 = input.LA(1);

				s = -1;
				if (((LA9_30>='\u0000' && LA9_30<='\t')||(LA9_30>='\u000B' && LA9_30<='\f')||(LA9_30>='\u000E' && LA9_30<='\uFFFF'))) {s = 79;}

				else s = 35;

				if (s >= 0) return s;
				break;
		}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 9, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
 
	#endregion

}

} // namespace CKCompiler.Analyzers
